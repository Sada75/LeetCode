class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int max = piles[0];
        for(int i=0;i<piles.size();i++){
            max = std::max(piles[i],max);
        }
        int ans = INT_MAX;
        int left = 1;
        int right = max;
        while(left<=right){
            int time = 0;
            int mid = (left + right)/2;
            for(int i=0;i<piles.size();i++){
                if(piles[i] % mid == 0){
                    if(time >= INT_MAX - (piles[i]/mid)){
                        continue;
                    }
                    time = time + piles[i]/mid;
                }else{
                    if(time >= INT_MAX - (piles[i]/mid)){
                        continue;
                    }
                    time = time + 1 + piles[i]/mid;
                }
            }
            if(time > h){
                left = mid + 1;
            }else{
                // ans = std::min(ans,mid);
                ans = mid;
                right = mid - 1;
            }
        }
        return ans;
    }
};
